#lang sicp
(define (make-semaphore n)
  (let ((cnt n)
        (state-mutex (make-mutex))
        (sem-mutex (make-mutex)))
    (define (acquire)
      (state-mutex 'acquire)
      (if (> cnt 0)
          (begin (set! cnt (- cnt 1)) (state-mutex 'release))
          (begin (state-mutex 'release) (acquire))))
    (define (release)
      (state-mutex 'acquire)
      (set! cnt (+ cnt 1))
      (state-mutex 'release))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Unknown request: " m))))
    dispatch))
      
(define (make-another-semaphore n)
  (let ((cnt n)
        (state-cell (list #f)))
    (define (release-state-cell!) (set-car! state-cell #f))
    (define (acquire)
      (if (test-and-set! state-cell)
          (acquire))
      (if (> cnt 0)
          (begin (set! cnt (- cnt 1)) (release-state-cell!))
          (begin (release-state-cell!) (acquire))))
    (define (release)
      (if (test-and-set! state-cell)
          (release))
      (set! cnt (+ cnt 1))
      (release-state-cell!))
    (define (dispatch m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))
            (else (error "Unknown request: " m))))
    dispatch))
