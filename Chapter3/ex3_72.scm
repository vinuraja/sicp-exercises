#lang sicp
(#%require racket/include)
(include "streams.scm")

(define (square-numbers-method)
  (define (square x) (* x x))
  (define (square-sum p)
    (+ (square (car p)) (square (cadr p))))
  (define (square-ordered)
    (weighted-pairs integers integers square-sum))
  (define (impl)
    (define squares-impl (stream-map (lambda (a b c d) (list a b c d))
                                     (square-ordered)
                                     (stream-cdr (square-ordered))
                                     (stream-cdr (stream-cdr (square-ordered)))
                                     (stream-cdr (stream-cdr (stream-cdr (square-ordered))))))
    (stream-map (lambda (l) (list (square-sum (car l)) (car l) (cadr l) (caddr l)))
                (stream-filter
                 (lambda (l)
                   (and (= (square-sum (car l)) (square-sum (cadr l)))
                        (= (square-sum (cadr l)) (square-sum (caddr l)))
                        (not (= (square-sum (caddr l)) (square-sum (cadddr l))))))
                squares-impl)))
(impl))
    

(define square-numbers (square-numbers-method))

(define (iter n)
  (if (not (= n -1))
      (begin (iter (- n 1)) (display (stream-ref square-numbers n)) (newline))))
(iter 5)
;(325 (10 15) (6 17) (1 18))
;(425 (13 16) (8 19) (5 20))
;(650 (17 19) (11 23) (5 25))
;(725 (14 23) (10 25) (7 26))
;(845 (19 22) (13 26) (2 29))
;(850 (15 25) (11 27) (3 29))
